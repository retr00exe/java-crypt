/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.code.crypt;

import java.awt.Color;
import java.util.Base64;
import java.math.BigInteger; 
import java.security.MessageDigest; 
import java.security.NoSuchAlgorithmException; 
import com.google.common.io.BaseEncoding;
import com.google.common.base.Charsets;

/**
 *
 * @author Mekel
 */
public class index extends javax.swing.JFrame {

    /**
     * Creates new form index
     */
    public index() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        main = new javax.swing.JPanel();
        sidebar = new javax.swing.JPanel();
        caesar = new javax.swing.JPanel();
        caesarLabel = new javax.swing.JLabel();
        hashing = new javax.swing.JPanel();
        hashLabel = new javax.swing.JLabel();
        encoding = new javax.swing.JPanel();
        encodingLabel = new javax.swing.JLabel();
        rsa = new javax.swing.JPanel();
        rsaLabel = new javax.swing.JLabel();
        exit = new javax.swing.JPanel();
        exitLabel = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        caesarPanel = new javax.swing.JPanel();
        shift = new javax.swing.JSpinner();
        shiftLabel = new javax.swing.JLabel();
        caesarInput = new javax.swing.JScrollPane();
        caesarInputArea = new javax.swing.JTextArea();
        caesarInputLabel = new javax.swing.JLabel();
        caesarOutput = new javax.swing.JScrollPane();
        caesarOutputArea = new javax.swing.JTextArea();
        caesarOutputLabel = new javax.swing.JLabel();
        caesarNav = new javax.swing.JPanel();
        encryptButton = new javax.swing.JButton();
        hashingPanel = new javax.swing.JPanel();
        selectHashLabel = new javax.swing.JLabel();
        hashInput = new javax.swing.JScrollPane();
        hashInputArea = new javax.swing.JTextArea();
        hashInputLabel = new javax.swing.JLabel();
        hashOutput = new javax.swing.JScrollPane();
        hashOutputArea = new javax.swing.JTextArea();
        hashOutputLabel = new javax.swing.JLabel();
        hashNav = new javax.swing.JPanel();
        hashComboBox = new javax.swing.JComboBox<>();
        hashButton = new javax.swing.JButton();
        encodingPanel = new javax.swing.JPanel();
        selectEncodingLabel = new javax.swing.JLabel();
        encodingInput = new javax.swing.JScrollPane();
        encodingInputArea = new javax.swing.JTextArea();
        encodingInputLabel = new javax.swing.JLabel();
        encodingOutput = new javax.swing.JScrollPane();
        encodingOutputArea = new javax.swing.JTextArea();
        encodingOutputLabel = new javax.swing.JLabel();
        encodingNav = new javax.swing.JPanel();
        encodingComboBox = new javax.swing.JComboBox<>();
        encodeButton = new javax.swing.JButton();
        rsaPanel = new javax.swing.JPanel();
        rsaPublicKey = new javax.swing.JScrollPane();
        encodingOutputArea1 = new javax.swing.JTextArea();
        rsaPublicKeyLabel = new javax.swing.JLabel();
        encodingNav1 = new javax.swing.JPanel();
        generateRsaButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1280, 720));
        setResizable(false);

        main.setBackground(new java.awt.Color(30, 35, 40));
        main.setPreferredSize(new java.awt.Dimension(720, 480));
        main.setLayout(new java.awt.BorderLayout());

        sidebar.setBackground(new java.awt.Color(24, 58, 86));

        caesar.setBackground(new java.awt.Color(21, 199, 203));
        caesar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        caesar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                index.this.mouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                index.this.mouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                index.this.mouseExited(evt);
            }
        });

        caesarLabel.setFont(new java.awt.Font("Source Code Pro Medium", 0, 14)); // NOI18N
        caesarLabel.setForeground(new java.awt.Color(255, 255, 255));
        caesarLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        caesarLabel.setText("Caesar");
        caesarLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout caesarLayout = new javax.swing.GroupLayout(caesar);
        caesar.setLayout(caesarLayout);
        caesarLayout.setHorizontalGroup(
            caesarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(caesarLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        caesarLayout.setVerticalGroup(
            caesarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, caesarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(caesarLabel)
                .addContainerGap())
        );

        hashing.setBackground(new java.awt.Color(21, 199, 203));
        hashing.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hashing.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                index.this.mouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                index.this.mouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                index.this.mouseExited(evt);
            }
        });

        hashLabel.setFont(new java.awt.Font("Source Code Pro Medium", 0, 14)); // NOI18N
        hashLabel.setForeground(new java.awt.Color(255, 255, 255));
        hashLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hashLabel.setText("Hashing");
        hashLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout hashingLayout = new javax.swing.GroupLayout(hashing);
        hashing.setLayout(hashingLayout);
        hashingLayout.setHorizontalGroup(
            hashingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(hashLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        hashingLayout.setVerticalGroup(
            hashingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hashingLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(hashLabel)
                .addContainerGap())
        );

        encoding.setBackground(new java.awt.Color(21, 199, 203));
        encoding.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        encoding.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                index.this.mouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                index.this.mouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                index.this.mouseExited(evt);
            }
        });

        encodingLabel.setFont(new java.awt.Font("Source Code Pro Medium", 0, 14)); // NOI18N
        encodingLabel.setForeground(new java.awt.Color(255, 255, 255));
        encodingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        encodingLabel.setText("Encoding");

        javax.swing.GroupLayout encodingLayout = new javax.swing.GroupLayout(encoding);
        encoding.setLayout(encodingLayout);
        encodingLayout.setHorizontalGroup(
            encodingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(encodingLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        encodingLayout.setVerticalGroup(
            encodingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encodingLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(encodingLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        rsa.setBackground(new java.awt.Color(21, 199, 203));
        rsa.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        rsa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                index.this.mouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                index.this.mouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                index.this.mouseExited(evt);
            }
        });

        rsaLabel.setFont(new java.awt.Font("Source Code Pro Medium", 0, 14)); // NOI18N
        rsaLabel.setForeground(new java.awt.Color(255, 255, 255));
        rsaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rsaLabel.setText("RSA");

        javax.swing.GroupLayout rsaLayout = new javax.swing.GroupLayout(rsa);
        rsa.setLayout(rsaLayout);
        rsaLayout.setHorizontalGroup(
            rsaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(rsaLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        rsaLayout.setVerticalGroup(
            rsaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rsaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rsaLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        exit.setBackground(new java.awt.Color(21, 199, 203));
        exit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                index.this.mouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                index.this.mouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                index.this.mouseExited(evt);
            }
        });

        exitLabel.setFont(new java.awt.Font("Source Code Pro Medium", 0, 14)); // NOI18N
        exitLabel.setForeground(new java.awt.Color(255, 255, 255));
        exitLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitLabel.setText("Exit");

        javax.swing.GroupLayout exitLayout = new javax.swing.GroupLayout(exit);
        exit.setLayout(exitLayout);
        exitLayout.setHorizontalGroup(
            exitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(exitLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        exitLayout.setVerticalGroup(
            exitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exitLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exitLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        title.setFont(new java.awt.Font("Source Code Pro Medium", 1, 18)); // NOI18N
        title.setForeground(new java.awt.Color(255, 255, 255));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setText("Crypt it!");

        javax.swing.GroupLayout sidebarLayout = new javax.swing.GroupLayout(sidebar);
        sidebar.setLayout(sidebarLayout);
        sidebarLayout.setHorizontalGroup(
            sidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(exit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(caesar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(hashing, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(encoding, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(sidebarLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(title)
                .addContainerGap(23, Short.MAX_VALUE))
            .addComponent(rsa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        sidebarLayout.setVerticalGroup(
            sidebarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidebarLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(title)
                .addGap(69, 69, 69)
                .addComponent(caesar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(hashing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(encoding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(rsa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 344, Short.MAX_VALUE)
                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        main.add(sidebar, java.awt.BorderLayout.LINE_START);

        mainPanel.setLayout(new java.awt.CardLayout());

        caesarPanel.setBackground(new java.awt.Color(225, 227, 226));

        shift.setModel(new javax.swing.SpinnerNumberModel(0, 0, 26, 1));

        shiftLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        shiftLabel.setText("Shift");

        caesarInputArea.setColumns(20);
        caesarInputArea.setRows(5);
        caesarInput.setViewportView(caesarInputArea);

        caesarInputLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        caesarInputLabel.setText("Input");

        caesarOutputArea.setColumns(20);
        caesarOutputArea.setRows(5);
        caesarOutput.setViewportView(caesarOutputArea);

        caesarOutputLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        caesarOutputLabel.setText("Output");

        caesarNav.setBackground(new java.awt.Color(21, 199, 203));

        javax.swing.GroupLayout caesarNavLayout = new javax.swing.GroupLayout(caesarNav);
        caesarNav.setLayout(caesarNavLayout);
        caesarNavLayout.setHorizontalGroup(
            caesarNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1132, Short.MAX_VALUE)
        );
        caesarNavLayout.setVerticalGroup(
            caesarNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );

        encryptButton.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        encryptButton.setText("Encrypt");
        encryptButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        encryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout caesarPanelLayout = new javax.swing.GroupLayout(caesarPanel);
        caesarPanel.setLayout(caesarPanelLayout);
        caesarPanelLayout.setHorizontalGroup(
            caesarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(caesarNav, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(caesarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(caesarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(caesarInput, javax.swing.GroupLayout.DEFAULT_SIZE, 1112, Short.MAX_VALUE)
                    .addComponent(caesarOutput)
                    .addGroup(caesarPanelLayout.createSequentialGroup()
                        .addGroup(caesarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(shiftLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(shift, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(caesarInputLabel)
                            .addComponent(caesarOutputLabel)
                            .addComponent(encryptButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        caesarPanelLayout.setVerticalGroup(
            caesarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(caesarPanelLayout.createSequentialGroup()
                .addComponent(caesarNav, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(shiftLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(shift, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(caesarInputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(caesarInput, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(encryptButton)
                .addGap(74, 74, 74)
                .addComponent(caesarOutputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(caesarOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
        );

        mainPanel.add(caesarPanel, "card2");

        hashingPanel.setBackground(new java.awt.Color(225, 227, 226));

        selectHashLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        selectHashLabel.setText("Select hash");

        hashInputArea.setColumns(20);
        hashInputArea.setRows(5);
        hashInput.setViewportView(hashInputArea);

        hashInputLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        hashInputLabel.setText("Input");

        hashOutputArea.setColumns(20);
        hashOutputArea.setRows(5);
        hashOutput.setViewportView(hashOutputArea);

        hashOutputLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        hashOutputLabel.setText("Hash value");

        hashNav.setBackground(new java.awt.Color(21, 199, 203));

        javax.swing.GroupLayout hashNavLayout = new javax.swing.GroupLayout(hashNav);
        hashNav.setLayout(hashNavLayout);
        hashNavLayout.setHorizontalGroup(
            hashNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        hashNavLayout.setVerticalGroup(
            hashNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );

        hashComboBox.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        hashComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MD-5", "SHA-1", "SHA-224", "SHA-256", "SHA-384", "SHA-512" }));
        hashComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hashComboBoxActionPerformed(evt);
            }
        });

        hashButton.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        hashButton.setText("Hash");
        hashButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hashButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hashButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hashingPanelLayout = new javax.swing.GroupLayout(hashingPanel);
        hashingPanel.setLayout(hashingPanelLayout);
        hashingPanelLayout.setHorizontalGroup(
            hashingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(hashNav, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(hashingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hashingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hashInput, javax.swing.GroupLayout.DEFAULT_SIZE, 1112, Short.MAX_VALUE)
                    .addComponent(hashOutput)
                    .addGroup(hashingPanelLayout.createSequentialGroup()
                        .addGroup(hashingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hashComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hashOutputLabel)
                            .addComponent(selectHashLabel)
                            .addComponent(hashInputLabel)
                            .addComponent(hashButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        hashingPanelLayout.setVerticalGroup(
            hashingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hashingPanelLayout.createSequentialGroup()
                .addComponent(hashNav, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(selectHashLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hashComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(hashInputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashInput, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hashButton)
                .addGap(70, 70, 70)
                .addComponent(hashOutputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hashOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
        );

        mainPanel.add(hashingPanel, "card3");

        encodingPanel.setBackground(new java.awt.Color(225, 227, 226));
        encodingPanel.setPreferredSize(new java.awt.Dimension(720, 480));

        selectEncodingLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        selectEncodingLabel.setText("Select encoding");

        encodingInputArea.setColumns(20);
        encodingInputArea.setRows(5);
        encodingInput.setViewportView(encodingInputArea);

        encodingInputLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        encodingInputLabel.setText("Input");

        encodingOutputArea.setColumns(20);
        encodingOutputArea.setRows(5);
        encodingOutput.setViewportView(encodingOutputArea);

        encodingOutputLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        encodingOutputLabel.setText("Output");

        encodingNav.setBackground(new java.awt.Color(21, 199, 203));

        javax.swing.GroupLayout encodingNavLayout = new javax.swing.GroupLayout(encodingNav);
        encodingNav.setLayout(encodingNavLayout);
        encodingNavLayout.setHorizontalGroup(
            encodingNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        encodingNavLayout.setVerticalGroup(
            encodingNavLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );

        encodingComboBox.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        encodingComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Base64", "Base32", "ASCII", "Hex", "Octal", "Binary", "ROT-13" }));
        encodingComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encodingComboBoxActionPerformed(evt);
            }
        });

        encodeButton.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        encodeButton.setText("Encode");
        encodeButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        encodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encodeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout encodingPanelLayout = new javax.swing.GroupLayout(encodingPanel);
        encodingPanel.setLayout(encodingPanelLayout);
        encodingPanelLayout.setHorizontalGroup(
            encodingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(encodingNav, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(encodingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(encodingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(encodingInput, javax.swing.GroupLayout.DEFAULT_SIZE, 1112, Short.MAX_VALUE)
                    .addComponent(encodingOutput)
                    .addGroup(encodingPanelLayout.createSequentialGroup()
                        .addGroup(encodingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(encodingOutputLabel)
                            .addComponent(selectEncodingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(encodingInputLabel)
                            .addComponent(encodeButton)
                            .addComponent(encodingComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        encodingPanelLayout.setVerticalGroup(
            encodingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(encodingPanelLayout.createSequentialGroup()
                .addComponent(encodingNav, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(selectEncodingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(encodingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(encodingInputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encodingInput, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(encodeButton)
                .addGap(70, 70, 70)
                .addComponent(encodingOutputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(encodingOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
        );

        mainPanel.add(encodingPanel, "card4");

        rsaPanel.setBackground(new java.awt.Color(225, 227, 226));
        rsaPanel.setPreferredSize(new java.awt.Dimension(720, 480));

        encodingOutputArea1.setColumns(20);
        encodingOutputArea1.setRows(5);
        rsaPublicKey.setViewportView(encodingOutputArea1);

        rsaPublicKeyLabel.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        rsaPublicKeyLabel.setText("Output");

        encodingNav1.setBackground(new java.awt.Color(21, 199, 203));

        javax.swing.GroupLayout encodingNav1Layout = new javax.swing.GroupLayout(encodingNav1);
        encodingNav1.setLayout(encodingNav1Layout);
        encodingNav1Layout.setHorizontalGroup(
            encodingNav1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        encodingNav1Layout.setVerticalGroup(
            encodingNav1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );

        generateRsaButton.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        generateRsaButton.setText("Encode");
        generateRsaButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        generateRsaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateRsaButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rsaPanelLayout = new javax.swing.GroupLayout(rsaPanel);
        rsaPanel.setLayout(rsaPanelLayout);
        rsaPanelLayout.setHorizontalGroup(
            rsaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(encodingNav1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(rsaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rsaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rsaPublicKey)
                    .addGroup(rsaPanelLayout.createSequentialGroup()
                        .addGroup(rsaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rsaPublicKeyLabel)
                            .addComponent(generateRsaButton))
                        .addGap(0, 1033, Short.MAX_VALUE)))
                .addContainerGap())
        );
        rsaPanelLayout.setVerticalGroup(
            rsaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rsaPanelLayout.createSequentialGroup()
                .addComponent(encodingNav1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(303, 303, 303)
                .addComponent(generateRsaButton)
                .addGap(70, 70, 70)
                .addComponent(rsaPublicKeyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rsaPublicKey, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
        );

        mainPanel.add(rsaPanel, "card4");

        main.add(mainPanel, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, 1280, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(main, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1280, 720));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void mouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseClicked
        if(evt.getSource()==caesar){
            caesarPanel.setVisible(true);
            hashingPanel.setVisible(false);
            encodingPanel.setVisible(false);
            rsaPanel.setVisible(false);
        }
        if(evt.getSource()==hashing){
            caesarPanel.setVisible(false);
            hashingPanel.setVisible(true);
            encodingPanel.setVisible(false);
            rsaPanel.setVisible(false);
        }
        if(evt.getSource()==encoding){
            caesarPanel.setVisible(false);
            hashingPanel.setVisible(false);
            encodingPanel.setVisible(true);
            rsaPanel.setVisible(false);
        }
        if(evt.getSource()==rsa){
            caesarPanel.setVisible(false);
            hashingPanel.setVisible(false);
            encodingPanel.setVisible(false);
            rsaPanel.setVisible(true);
        }
        if(evt.getSource()==exit){
            System.exit(0);
        }
    }//GEN-LAST:event_mouseClicked

    private void mouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseEntered
        if(evt.getSource()==caesar){
            caesar.setBackground(new Color(22, 148, 161));
        }
        if(evt.getSource()==hashing){
            hashing.setBackground(new Color(22, 148, 161));
        }
        if(evt.getSource()==encoding){
            encoding.setBackground(new Color(22, 148, 161));
        }
        if(evt.getSource()==rsa){
            rsa.setBackground(new Color(22, 148, 161));
        }
        if(evt.getSource()==exit){
            exit.setBackground(new Color(22, 148, 161));
        }
    }//GEN-LAST:event_mouseEntered

    private void mouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseExited
        if(evt.getSource()==caesar){
            caesar.setBackground(new Color(21, 199, 203));
        }
        if(evt.getSource()==hashing){
            hashing.setBackground(new Color(21, 199, 203));
        }
        if(evt.getSource()==encoding){
            encoding.setBackground(new Color(21, 199, 203));
        }
        if(evt.getSource()==rsa){
            rsa.setBackground(new Color(21, 199, 203));
        }
        if(evt.getSource()==exit){
            exit.setBackground(new Color(21, 199, 203));
        }
    }//GEN-LAST:event_mouseExited

    private void hashComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hashComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hashComboBoxActionPerformed

    private void encodingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encodingComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_encodingComboBoxActionPerformed

    private void encodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encodeButtonActionPerformed
        int encodingComboBoxValue = encodingComboBox.getSelectedIndex();
        String encodingPlainText = encodingInputArea.getText();
        switch(encodingComboBoxValue){
            case 0:
                byte[] base64Bytes = Base64.getEncoder().encode(encodingPlainText.getBytes());
                encodingOutputArea.setText(new String(base64Bytes));
                break;
            case 1:
                String base32Bytes = BaseEncoding.base32().encode(encodingPlainText.getBytes(Charsets.US_ASCII));
                encodingOutputArea.setText(base32Bytes);
                break;
            case 2:
                
                break;
            case 3:
                String base16Bytes = BaseEncoding.base16().encode(encodingPlainText.getBytes(Charsets.US_ASCII)).toLowerCase();
                encodingOutputArea.setText("0x" + base16Bytes);
                break;
            case 6:
                String text = encodingPlainText;
                int s = 13;
                StringBuffer result= new StringBuffer(); 
                for(int i=0; i < text.length(); i++){
                    if(text.charAt(i)==' '){
                        result.append(' ');
                        continue;
                    }

                    if (Character.isUpperCase(text.charAt(i))){ 
                        char ch = (char)(((int)text.charAt(i) + 
                                          s - 65) % 26 + 65); 
                        result.append(ch); 
                    } 
                    else{ 
                        char ch = (char)(((int)text.charAt(i) + s - 97) % 26 + 97); 
                        result.append(ch); 
                    } 
                } 
                encodingOutputArea.setText(new String(result));
        }
    }//GEN-LAST:event_encodeButtonActionPerformed

    private void hashButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hashButtonActionPerformed
        int hashComboBoxValue = hashComboBox.getSelectedIndex();
        String hashPlainText = hashInputArea.getText();
        switch(hashComboBoxValue){
            case 0:
                try { 
                    MessageDigest md = MessageDigest.getInstance("MD5");
                    byte[] messageDigest = md.digest(hashPlainText.getBytes());
                    BigInteger no = new BigInteger(1, messageDigest);
                    String hashtext = no.toString(16);
                    while (hashtext.length() < 32) {
                        hashtext = "0" + hashtext;
                    }
                    hashOutputArea.setText(hashtext);
                }
                catch (NoSuchAlgorithmException e) { 
                    throw new RuntimeException(e); 
                }
                break;
            case 1:
                try { 
                    MessageDigest md = MessageDigest.getInstance("SHA-1");
                    byte[] messageDigest = md.digest(hashPlainText.getBytes());
                    BigInteger no = new BigInteger(1, messageDigest);
                    String hashtext = no.toString(16);
                    while (hashtext.length() < 32) {
                        hashtext = "0" + hashtext;
                    }
                    hashOutputArea.setText(hashtext);
                }
                catch (NoSuchAlgorithmException e) { 
                    throw new RuntimeException(e); 
                }
                break;
            case 2:
                try { 
                    MessageDigest md = MessageDigest.getInstance("SHA-224");
                    byte[] messageDigest = md.digest(hashPlainText.getBytes());
                    BigInteger no = new BigInteger(1, messageDigest);
                    String hashtext = no.toString(16);
                    while (hashtext.length() < 32) {
                        hashtext = "0" + hashtext;
                    }
                    hashOutputArea.setText(hashtext);
                }
                catch (NoSuchAlgorithmException e) { 
                    throw new RuntimeException(e); 
                }
                break;
            case 3:
                try { 
                    MessageDigest md = MessageDigest.getInstance("SHA-256");
                    byte[] messageDigest = md.digest(hashPlainText.getBytes());
                    BigInteger no = new BigInteger(1, messageDigest);
                    String hashtext = no.toString(16);
                    while (hashtext.length() < 32) {
                        hashtext = "0" + hashtext;
                    }
                    hashOutputArea.setText(hashtext);
                }
                catch (NoSuchAlgorithmException e) { 
                    throw new RuntimeException(e); 
                }
                break;
            case 4:
                try { 
                    MessageDigest md = MessageDigest.getInstance("SHA-384");
                    byte[] messageDigest = md.digest(hashPlainText.getBytes());
                    BigInteger no = new BigInteger(1, messageDigest);
                    String hashtext = no.toString(16);
                    while (hashtext.length() < 32) {
                        hashtext = "0" + hashtext;
                    }
                    hashOutputArea.setText(hashtext);
                }
                catch (NoSuchAlgorithmException e) { 
                    throw new RuntimeException(e); 
                }
                break;
            case 5:
                try { 
                    MessageDigest md = MessageDigest.getInstance("SHA-512");
                    byte[] messageDigest = md.digest(hashPlainText.getBytes());
                    BigInteger no = new BigInteger(1, messageDigest);
                    String hashtext = no.toString(16);
                    while (hashtext.length() < 32) {
                        hashtext = "0" + hashtext;
                    }
                    hashOutputArea.setText(hashtext);
                }
                catch (NoSuchAlgorithmException e) { 
                    throw new RuntimeException(e); 
                }
                break;
        }
    }//GEN-LAST:event_hashButtonActionPerformed

    private void encryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptButtonActionPerformed
        String text = caesarInputArea.getText();
        int s = (Integer) shift.getValue();
        StringBuffer result= new StringBuffer(); 
        for(int i=0; i < text.length(); i++){
            if(text.charAt(i)==' '){
                result.append(' ');
                continue;
            }
            
            if (Character.isUpperCase(text.charAt(i))){ 
                char ch = (char)(((int)text.charAt(i) + 
                                  s - 65) % 26 + 65); 
                result.append(ch); 
            } 
            else{ 
                char ch = (char)(((int)text.charAt(i) + s - 97) % 26 + 97); 
                result.append(ch); 
            } 
        } 
        caesarOutputArea.setText(new String(result)); 
    }//GEN-LAST:event_encryptButtonActionPerformed

    private void generateRsaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateRsaButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generateRsaButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new index().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel caesar;
    private javax.swing.JScrollPane caesarInput;
    private javax.swing.JTextArea caesarInputArea;
    private javax.swing.JLabel caesarInputLabel;
    private javax.swing.JLabel caesarLabel;
    private javax.swing.JPanel caesarNav;
    private javax.swing.JScrollPane caesarOutput;
    private javax.swing.JTextArea caesarOutputArea;
    private javax.swing.JLabel caesarOutputLabel;
    private javax.swing.JPanel caesarPanel;
    private javax.swing.JButton encodeButton;
    private javax.swing.JPanel encoding;
    private javax.swing.JPanel encoding1;
    private javax.swing.JComboBox<String> encodingComboBox;
    private javax.swing.JScrollPane encodingInput;
    private javax.swing.JTextArea encodingInputArea;
    private javax.swing.JLabel encodingInputLabel;
    private javax.swing.JLabel encodingLabel;
    private javax.swing.JLabel encodingLabel1;
    private javax.swing.JPanel encodingNav;
    private javax.swing.JPanel encodingNav1;
    private javax.swing.JScrollPane encodingOutput;
    private javax.swing.JTextArea encodingOutputArea;
    private javax.swing.JTextArea encodingOutputArea1;
    private javax.swing.JLabel encodingOutputLabel;
    private javax.swing.JPanel encodingPanel;
    private javax.swing.JButton encryptButton;
    private javax.swing.JPanel exit;
    private javax.swing.JLabel exitLabel;
    private javax.swing.JButton generateRsaButton;
    private javax.swing.JButton hashButton;
    private javax.swing.JComboBox<String> hashComboBox;
    private javax.swing.JScrollPane hashInput;
    private javax.swing.JTextArea hashInputArea;
    private javax.swing.JLabel hashInputLabel;
    private javax.swing.JLabel hashLabel;
    private javax.swing.JPanel hashNav;
    private javax.swing.JScrollPane hashOutput;
    private javax.swing.JTextArea hashOutputArea;
    private javax.swing.JLabel hashOutputLabel;
    private javax.swing.JPanel hashing;
    private javax.swing.JPanel hashingPanel;
    private javax.swing.JPanel main;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel rsa;
    private javax.swing.JLabel rsaLabel;
    private javax.swing.JPanel rsaPanel;
    private javax.swing.JScrollPane rsaPublicKey;
    private javax.swing.JLabel rsaPublicKeyLabel;
    private javax.swing.JLabel selectEncodingLabel;
    private javax.swing.JLabel selectHashLabel;
    private javax.swing.JSpinner shift;
    private javax.swing.JLabel shiftLabel;
    private javax.swing.JPanel sidebar;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
